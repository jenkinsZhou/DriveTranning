package com.tourcoo.training.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tourcoo.training.entity.account.CarInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR_INFO".
*/
public class CarInfoDao extends AbstractDao<CarInfo, Void> {

    public static final String TABLENAME = "CAR_INFO";

    /**
     * Properties of entity CarInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CarNum = new Property(0, String.class, "CarNum", false, "CAR_NUM");
        public final static Property CarModel = new Property(1, String.class, "CarModel", false, "CAR_MODEL");
        public final static Property CarBrand = new Property(2, String.class, "CarBrand", false, "CAR_BRAND");
        public final static Property ExpiredTime = new Property(3, String.class, "ExpiredTime", false, "EXPIRED_TIME");
    }


    public CarInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CarInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR_INFO\" (" + //
                "\"CAR_NUM\" TEXT," + // 0: CarNum
                "\"CAR_MODEL\" TEXT," + // 1: CarModel
                "\"CAR_BRAND\" TEXT," + // 2: CarBrand
                "\"EXPIRED_TIME\" TEXT);"); // 3: ExpiredTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarInfo entity) {
        stmt.clearBindings();
 
        String CarNum = entity.getCarNum();
        if (CarNum != null) {
            stmt.bindString(1, CarNum);
        }
 
        String CarModel = entity.getCarModel();
        if (CarModel != null) {
            stmt.bindString(2, CarModel);
        }
 
        String CarBrand = entity.getCarBrand();
        if (CarBrand != null) {
            stmt.bindString(3, CarBrand);
        }
 
        String ExpiredTime = entity.getExpiredTime();
        if (ExpiredTime != null) {
            stmt.bindString(4, ExpiredTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarInfo entity) {
        stmt.clearBindings();
 
        String CarNum = entity.getCarNum();
        if (CarNum != null) {
            stmt.bindString(1, CarNum);
        }
 
        String CarModel = entity.getCarModel();
        if (CarModel != null) {
            stmt.bindString(2, CarModel);
        }
 
        String CarBrand = entity.getCarBrand();
        if (CarBrand != null) {
            stmt.bindString(3, CarBrand);
        }
 
        String ExpiredTime = entity.getExpiredTime();
        if (ExpiredTime != null) {
            stmt.bindString(4, ExpiredTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CarInfo readEntity(Cursor cursor, int offset) {
        CarInfo entity = new CarInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CarNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CarModel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CarBrand
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // ExpiredTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarInfo entity, int offset) {
        entity.setCarNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCarModel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCarBrand(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpiredTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CarInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CarInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(CarInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
