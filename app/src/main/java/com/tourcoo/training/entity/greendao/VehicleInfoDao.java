package com.tourcoo.training.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tourcoo.training.entity.account.VehicleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEHICLE_INFO".
*/
public class VehicleInfoDao extends AbstractDao<VehicleInfo, Void> {

    public static final String TABLENAME = "VEHICLE_INFO";

    /**
     * Properties of entity VehicleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PlateNumber = new Property(0, String.class, "PlateNumber", false, "PLATE_NUMBER");
        public final static Property PlateColor = new Property(1, String.class, "PlateColor", false, "PLATE_COLOR");
        public final static Property Model = new Property(2, String.class, "Model", false, "MODEL");
        public final static Property Brand = new Property(3, String.class, "Brand", false, "BRAND");
        public final static Property ExpiredTime = new Property(4, String.class, "ExpiredTime", false, "EXPIRED_TIME");
    }


    public VehicleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VehicleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEHICLE_INFO\" (" + //
                "\"PLATE_NUMBER\" TEXT," + // 0: PlateNumber
                "\"PLATE_COLOR\" TEXT," + // 1: PlateColor
                "\"MODEL\" TEXT," + // 2: Model
                "\"BRAND\" TEXT," + // 3: Brand
                "\"EXPIRED_TIME\" TEXT);"); // 4: ExpiredTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEHICLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VehicleInfo entity) {
        stmt.clearBindings();
 
        String PlateNumber = entity.getPlateNumber();
        if (PlateNumber != null) {
            stmt.bindString(1, PlateNumber);
        }
 
        String PlateColor = entity.getPlateColor();
        if (PlateColor != null) {
            stmt.bindString(2, PlateColor);
        }
 
        String Model = entity.getModel();
        if (Model != null) {
            stmt.bindString(3, Model);
        }
 
        String Brand = entity.getBrand();
        if (Brand != null) {
            stmt.bindString(4, Brand);
        }
 
        String ExpiredTime = entity.getExpiredTime();
        if (ExpiredTime != null) {
            stmt.bindString(5, ExpiredTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VehicleInfo entity) {
        stmt.clearBindings();
 
        String PlateNumber = entity.getPlateNumber();
        if (PlateNumber != null) {
            stmt.bindString(1, PlateNumber);
        }
 
        String PlateColor = entity.getPlateColor();
        if (PlateColor != null) {
            stmt.bindString(2, PlateColor);
        }
 
        String Model = entity.getModel();
        if (Model != null) {
            stmt.bindString(3, Model);
        }
 
        String Brand = entity.getBrand();
        if (Brand != null) {
            stmt.bindString(4, Brand);
        }
 
        String ExpiredTime = entity.getExpiredTime();
        if (ExpiredTime != null) {
            stmt.bindString(5, ExpiredTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VehicleInfo readEntity(Cursor cursor, int offset) {
        VehicleInfo entity = new VehicleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PlateNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PlateColor
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Model
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Brand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ExpiredTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VehicleInfo entity, int offset) {
        entity.setPlateNumber(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPlateColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpiredTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VehicleInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VehicleInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(VehicleInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
