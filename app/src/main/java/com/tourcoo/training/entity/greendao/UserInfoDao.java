package com.tourcoo.training.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tourcoo.training.entity.account.VehicleInfo.VehicleInfoListConverter;
import java.util.List;

import com.tourcoo.training.entity.account.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Void> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AccessToken = new Property(0, String.class, "AccessToken", false, "ACCESS_TOKEN");
        public final static Property Enabled = new Property(1, int.class, "Enabled", false, "ENABLED");
        public final static Property FVEnable = new Property(2, int.class, "FVEnable", false, "FVENABLE");
        public final static Property UserType = new Property(3, int.class, "UserType", false, "USER_TYPE");
        public final static Property IsAuthenticated = new Property(4, int.class, "IsAuthenticated", false, "IS_AUTHENTICATED");
        public final static Property Status = new Property(5, int.class, "Status", false, "STATUS");
        public final static Property IndustryCategoryIDs = new Property(6, String.class, "IndustryCategoryIDs", false, "INDUSTRY_CATEGORY_IDS");
        public final static Property IndustryCategoryNames = new Property(7, String.class, "IndustryCategoryNames", false, "INDUSTRY_CATEGORY_NAMES");
        public final static Property Name = new Property(8, String.class, "Name", false, "NAME");
        public final static Property TraineeID = new Property(9, String.class, "TraineeID", false, "TRAINEE_ID");
        public final static Property CoinsTotal = new Property(10, double.class, "CoinsTotal", false, "COINS_TOTAL");
        public final static Property CoinsRemain = new Property(11, double.class, "CoinsRemain", false, "COINS_REMAIN");
        public final static Property Avatar = new Property(12, String.class, "Avatar", false, "AVATAR");
        public final static Property Phone = new Property(13, String.class, "Phone", false, "PHONE");
        public final static Property IDCard = new Property(14, String.class, "IDCard", false, "IDCARD");
        public final static Property IDCardUrl = new Property(15, String.class, "IDCardUrl", false, "IDCARD_URL");
        public final static Property CompanyName = new Property(16, String.class, "CompanyName", false, "COMPANY_NAME");
        public final static Property IsMandatoryUpdate = new Property(17, double.class, "IsMandatoryUpdate", false, "IS_MANDATORY_UPDATE");
        public final static Property OnlineLearnProgress = new Property(18, double.class, "OnlineLearnProgress", false, "ONLINE_LEARN_PROGRESS");
        public final static Property OnsiteLearnProgress = new Property(19, double.class, "OnsiteLearnProgress", false, "ONSITE_LEARN_PROGRESS");
        public final static Property MonthRanking = new Property(20, String.class, "MonthRanking", false, "MONTH_RANKING");
        public final static Property Vehicles = new Property(21, String.class, "Vehicles", false, "VEHICLES");
    }

    private final VehicleInfoListConverter VehiclesConverter = new VehicleInfoListConverter();

    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"ACCESS_TOKEN\" TEXT," + // 0: AccessToken
                "\"ENABLED\" INTEGER NOT NULL ," + // 1: Enabled
                "\"FVENABLE\" INTEGER NOT NULL ," + // 2: FVEnable
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 3: UserType
                "\"IS_AUTHENTICATED\" INTEGER NOT NULL ," + // 4: IsAuthenticated
                "\"STATUS\" INTEGER NOT NULL ," + // 5: Status
                "\"INDUSTRY_CATEGORY_IDS\" TEXT," + // 6: IndustryCategoryIDs
                "\"INDUSTRY_CATEGORY_NAMES\" TEXT," + // 7: IndustryCategoryNames
                "\"NAME\" TEXT," + // 8: Name
                "\"TRAINEE_ID\" TEXT," + // 9: TraineeID
                "\"COINS_TOTAL\" REAL NOT NULL ," + // 10: CoinsTotal
                "\"COINS_REMAIN\" REAL NOT NULL ," + // 11: CoinsRemain
                "\"AVATAR\" TEXT," + // 12: Avatar
                "\"PHONE\" TEXT," + // 13: Phone
                "\"IDCARD\" TEXT," + // 14: IDCard
                "\"IDCARD_URL\" TEXT," + // 15: IDCardUrl
                "\"COMPANY_NAME\" TEXT," + // 16: CompanyName
                "\"IS_MANDATORY_UPDATE\" REAL NOT NULL ," + // 17: IsMandatoryUpdate
                "\"ONLINE_LEARN_PROGRESS\" REAL NOT NULL ," + // 18: OnlineLearnProgress
                "\"ONSITE_LEARN_PROGRESS\" REAL NOT NULL ," + // 19: OnsiteLearnProgress
                "\"MONTH_RANKING\" TEXT," + // 20: MonthRanking
                "\"VEHICLES\" TEXT);"); // 21: Vehicles
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String AccessToken = entity.getAccessToken();
        if (AccessToken != null) {
            stmt.bindString(1, AccessToken);
        }
        stmt.bindLong(2, entity.getEnabled());
        stmt.bindLong(3, entity.getFVEnable());
        stmt.bindLong(4, entity.getUserType());
        stmt.bindLong(5, entity.getIsAuthenticated());
        stmt.bindLong(6, entity.getStatus());
 
        String IndustryCategoryIDs = entity.getIndustryCategoryIDs();
        if (IndustryCategoryIDs != null) {
            stmt.bindString(7, IndustryCategoryIDs);
        }
 
        String IndustryCategoryNames = entity.getIndustryCategoryNames();
        if (IndustryCategoryNames != null) {
            stmt.bindString(8, IndustryCategoryNames);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(9, Name);
        }
 
        String TraineeID = entity.getTraineeID();
        if (TraineeID != null) {
            stmt.bindString(10, TraineeID);
        }
        stmt.bindDouble(11, entity.getCoinsTotal());
        stmt.bindDouble(12, entity.getCoinsRemain());
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(13, Avatar);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(14, Phone);
        }
 
        String IDCard = entity.getIDCard();
        if (IDCard != null) {
            stmt.bindString(15, IDCard);
        }
 
        String IDCardUrl = entity.getIDCardUrl();
        if (IDCardUrl != null) {
            stmt.bindString(16, IDCardUrl);
        }
 
        String CompanyName = entity.getCompanyName();
        if (CompanyName != null) {
            stmt.bindString(17, CompanyName);
        }
        stmt.bindDouble(18, entity.getIsMandatoryUpdate());
        stmt.bindDouble(19, entity.getOnlineLearnProgress());
        stmt.bindDouble(20, entity.getOnsiteLearnProgress());
 
        String MonthRanking = entity.getMonthRanking();
        if (MonthRanking != null) {
            stmt.bindString(21, MonthRanking);
        }
 
        List Vehicles = entity.getVehicles();
        if (Vehicles != null) {
            stmt.bindString(22, VehiclesConverter.convertToDatabaseValue(Vehicles));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String AccessToken = entity.getAccessToken();
        if (AccessToken != null) {
            stmt.bindString(1, AccessToken);
        }
        stmt.bindLong(2, entity.getEnabled());
        stmt.bindLong(3, entity.getFVEnable());
        stmt.bindLong(4, entity.getUserType());
        stmt.bindLong(5, entity.getIsAuthenticated());
        stmt.bindLong(6, entity.getStatus());
 
        String IndustryCategoryIDs = entity.getIndustryCategoryIDs();
        if (IndustryCategoryIDs != null) {
            stmt.bindString(7, IndustryCategoryIDs);
        }
 
        String IndustryCategoryNames = entity.getIndustryCategoryNames();
        if (IndustryCategoryNames != null) {
            stmt.bindString(8, IndustryCategoryNames);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(9, Name);
        }
 
        String TraineeID = entity.getTraineeID();
        if (TraineeID != null) {
            stmt.bindString(10, TraineeID);
        }
        stmt.bindDouble(11, entity.getCoinsTotal());
        stmt.bindDouble(12, entity.getCoinsRemain());
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(13, Avatar);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(14, Phone);
        }
 
        String IDCard = entity.getIDCard();
        if (IDCard != null) {
            stmt.bindString(15, IDCard);
        }
 
        String IDCardUrl = entity.getIDCardUrl();
        if (IDCardUrl != null) {
            stmt.bindString(16, IDCardUrl);
        }
 
        String CompanyName = entity.getCompanyName();
        if (CompanyName != null) {
            stmt.bindString(17, CompanyName);
        }
        stmt.bindDouble(18, entity.getIsMandatoryUpdate());
        stmt.bindDouble(19, entity.getOnlineLearnProgress());
        stmt.bindDouble(20, entity.getOnsiteLearnProgress());
 
        String MonthRanking = entity.getMonthRanking();
        if (MonthRanking != null) {
            stmt.bindString(21, MonthRanking);
        }
 
        List Vehicles = entity.getVehicles();
        if (Vehicles != null) {
            stmt.bindString(22, VehiclesConverter.convertToDatabaseValue(Vehicles));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AccessToken
            cursor.getInt(offset + 1), // Enabled
            cursor.getInt(offset + 2), // FVEnable
            cursor.getInt(offset + 3), // UserType
            cursor.getInt(offset + 4), // IsAuthenticated
            cursor.getInt(offset + 5), // Status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IndustryCategoryIDs
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // IndustryCategoryNames
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TraineeID
            cursor.getDouble(offset + 10), // CoinsTotal
            cursor.getDouble(offset + 11), // CoinsRemain
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Avatar
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Phone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // IDCard
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // IDCardUrl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CompanyName
            cursor.getDouble(offset + 17), // IsMandatoryUpdate
            cursor.getDouble(offset + 18), // OnlineLearnProgress
            cursor.getDouble(offset + 19), // OnsiteLearnProgress
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // MonthRanking
            cursor.isNull(offset + 21) ? null : VehiclesConverter.convertToEntityProperty(cursor.getString(offset + 21)) // Vehicles
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setAccessToken(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEnabled(cursor.getInt(offset + 1));
        entity.setFVEnable(cursor.getInt(offset + 2));
        entity.setUserType(cursor.getInt(offset + 3));
        entity.setIsAuthenticated(cursor.getInt(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setIndustryCategoryIDs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIndustryCategoryNames(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTraineeID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCoinsTotal(cursor.getDouble(offset + 10));
        entity.setCoinsRemain(cursor.getDouble(offset + 11));
        entity.setAvatar(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIDCard(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIDCardUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompanyName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsMandatoryUpdate(cursor.getDouble(offset + 17));
        entity.setOnlineLearnProgress(cursor.getDouble(offset + 18));
        entity.setOnsiteLearnProgress(cursor.getDouble(offset + 19));
        entity.setMonthRanking(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setVehicles(cursor.isNull(offset + 21) ? null : VehiclesConverter.convertToEntityProperty(cursor.getString(offset + 21)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
